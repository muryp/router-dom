---
import { ROUTER_RULE } from "../router";
import { generateStaticUrl, callbackReturn } from "../../src";

export async function getStaticPaths() {
  const SSG = await generateStaticUrl(ROUTER_RULE);
  const LINK_FULL = SSG;
  const LINK = await generateStaticUrl(ROUTER_RULE,{NUM: 2});
  SSG.push(ROUTER_RULE.NOT_FOUND);
  return SSG.map((CONTENT) => {
    const slug =
      CONTENT.url !== "/" ? CONTENT.url.replace(/^\//, "") : undefined;
    return {
      params: {
        slug,
      },
      props: { ...CONTENT, LINK_FULL, LINK },
    };
  });
}
const BASE_URL = ROUTER_RULE.BASE_URL;
interface AstroProps extends callbackReturn {
  LINK_FULL : callbackReturn[]
  LINK : callbackReturn[]
}
const { title, html, LINK_FULL, LINK } = Astro.props as AstroProps;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <path href={BASE_URL}/>
    <title>{title}</title>
  </head>
  <body>
    <a href="2">current path 2</a> |
    <a href="./2">current path 2 with ./</a> |
    <a href="./">current path / del one path</a> |
    <a href="../">behind path / del two path</a> |
    <a href="../2">behind path path 2</a> |
    <a href="/fsadfs">link not found</a> |
    <h2>Link by number</h2>
    <nav>
      {
        LINK.map(({ url, title }) => {
          return <a href={BASE_URL + url}>{title}</a>;
        })
      }
    </nav>
    <h2>All link</h2>
    <nav>
      {
        LINK_FULL.map(({ url, title }) => {
          return <a href={BASE_URL + url}>{title}</a>;
        })
      }
    </nav>
    <h2>TES LINK HOME HASTAG</h2>
    <a href={BASE_URL + "/#1"}>home 1</a>
    <a href={BASE_URL + "/#15"}>home 15</a>
    <a href={BASE_URL + "/#19"}>home 19</a>
    <div id="root" set:html={html} />
    <script src="../script/domRoute.ts"></script>
  </body>


</html>
